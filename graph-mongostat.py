#!/usr/bin/python
# Copyright 2016 Felipe Reyes <felipe.reyes@canonical.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import argparse
import gzip
import json
import os
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.ticker import FuncFormatter
import humanfriendly


__description__ = 'Graph mongostat'


class FormatError(Exception):
    pass


def setup_options():

    parser = argparse.ArgumentParser(description=__description__)
    parser.add_argument('-i', '--input', dest="input", metavar="FILE",
                        help="input file generated by collect-mongostat.py")
    parser.add_argument('-o', '--output', dest="output", metavar="FILE",
                        help="output file")
    return parser.parse_args()


def main():
    opts = setup_options()

    if os.path.splitext(opts.input)[1] == '.gz':
        infile = gzip.open(opts.input, 'r')
    else:
        infile = open(opts.input, 'r')

    dt_formatter = mdates.strpdate2num('%Y-%m-%dT%H:%M:%S')
    matrix = {}
    for line in infile:
        try:
            item = json.loads(bytes.decode(line))
        except:
            # skip the line
            continue

        for host in item:
            if host not in matrix:
                matrix[host] = {'ts': [], 'vsize': [], 'res': []}

            # we assume the file contains the timestamp in order
            matrix[host]['ts'].append(dt_formatter(item[host]['ts']))
            matrix[host]['vsize'].append(
                humanfriendly.parse_size(item[host]['vsize']))
            matrix[host]['res'].append(
                humanfriendly.parse_size(item[host]['res']))

    i = 0
    size_formatter = FuncFormatter(lambda y, pos: humanfriendly.format_size(y))

    for key in matrix:
        fig, ax = plt.subplots()
        ax.plot_date(x=matrix[key]['ts'],
                     y=matrix[key]['vsize'], fmt='-', fillstyle='full')
        ax.fill_between(matrix[key]['ts'], matrix[key]['vsize'], color='red')
        i += 1
        ax.format_xdata = mdates.DateFormatter('%Y-%m-%d %H:%M')
        ax.set_ylabel("Virtual Memory")
        ax.grid(True)
        yaxis = ax.get_yaxis()
        yaxis.set_major_formatter(size_formatter)

        ax.plot_date(x=matrix[key]['ts'],
                     y=matrix[key]['res'], fmt='-')
        ax.fill_between(matrix[key]['ts'], matrix[key]['res'], color='green')

        fig.autofmt_xdate()

    plt.show()


if __name__ == "__main__":
    main()
